/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExporterExcel.java
 *
 * Created on 30 déc. 2011, 10:03:17
 */
package cpc.laboChimie.ui;

import cpc.laboChimie.jpa.Analyse;
import cpc.laboChimie.jpa.Eau;
import cpc.laboChimie.jpa.Norme;
import cpc.laboChimie.jpa.TypeEau;
import cpc.laboChimie.metier.IMetier;
import cpc.laboChimie.metierConfig.ParametreGestion;
import cpc.laboChimie.model.TableModelTypeEau;
import java.awt.Desktop;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jxl.write.WriteException;
import org.jdesktop.application.Action;
import org.jdesktop.swingx.JXTable;
import jxl.*;
//import jxl.

import jxl.write.WritableWorkbook;
//import jxl.write.biff.File;
import java.io.File;
import java.text.DateFormat;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableSheet;

/**
 *
 * @author MAXWELL
 */
public class ExporterExcel extends javax.swing.JDialog {

    /** Creates new form ExporterExcel */
    /*
     * prend en parametre la liste des eaux
     * la période
     */
    
    
    private Vector<Eau> list_eau = new Vector<Eau>();
    private Date deb;
    private Date fin;
    private TableModelTypeEau ModelTypeEau;
    private Vector<TypeEau> list_typ = new Vector<TypeEau>();
    private ParametreGestion parametreGestion;
    private IMetier metier;
    JdialogStatistique jdexpor;
    private Hashtable[] tableau2;
    public ExporterExcel(java.awt.Frame parent, JdialogStatistique jdexport,Vector<Eau> ls, Date debut, Date finh) {
        initSpring();
        initComponents();
        this.setTitle("EXPORTATION DES ANALYSES");
        System.out.println("ExporterExcel LS  ="+ ls.size());
       
        list_eau.addAll(ls);
        deb = debut;
        fin = finh;
        jdexpor = jdexport;
     this.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.out.println("FERMETURE DE LA FENETRE");
                        fermerExport();
                    }
                });
     jComboBoxSelectionFormat.setSelectedIndex(-1);
     
    }

    public void fermerExport()
    {
      this.jdexpor.setExport(null);
    
    }
    
        private void initSpring() {

     //   List<Client> ls = ;
        ModelTypeEau = new TableModelTypeEau(list_typ);
        //tableModelEaux = new TableModelEaux(eaus);
        parametreGestion = ParametreGestion.getInstance();
       metier = parametreGestion.getMetier();
      ModelTypeEau.addRows(metier.getAllTypeEau());
      
      
    }
String typeEau = "";
long idtypEau = 0;    
    public String getTypeEaumastertable()
    {      
          if (mastertabletypeEau.getSelectedRow() != -1) {
            
            
            int ligne = mastertabletypeEau.getSelectedRow();
            idtypEau = (Long) mastertabletypeEau.getValueAt(ligne, 0);
            typeEau = (String) mastertabletypeEau.getValueAt(ligne, 1);
         
             return typeEau;
        } else {
            return null;
        }
     
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxSelectionFormat = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mastertabletypeEau = new org.jdesktop.swingx.JXTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cpc.laboChimie.mainApp.class).getContext().getResourceMap(ExporterExcel.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cpc.laboChimie.mainApp.class).getContext().getActionMap(ExporterExcel.class, this);
        jToggleButton1.setAction(actionMap.get("exporter")); // NOI18N
        jToggleButton1.setText(resourceMap.getString("jToggleButton1.text")); // NOI18N
        jToggleButton1.setName("jToggleButton1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jComboBoxSelectionFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CSV", "XML" }));
        jComboBoxSelectionFormat.setName("jComboBoxSelectionFormat"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        mastertabletypeEau.setModel(ModelTypeEau);
        mastertabletypeEau.setName("mastertabletypeEau"); // NOI18N
        jScrollPane1.setViewportView(mastertabletypeEau);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSelectionFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(325, Short.MAX_VALUE)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSelectionFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
  /*  public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ExporterExcel(null,null,null,null,null).setVisible(true);
            }
        });
    }*/

    @Action
    public void exporter() throws WriteException /*throws WriteException**/ {
     //recupere le type d'eau du mastertable
        //recupere le format et exporte.
        Vector<Eau> eauExporte = new Vector();
        String path=null;
        Hashtable[] tableau ;
        int p =14;
        if(getTypeEaumastertable()==null)
        {
          JOptionPane.showMessageDialog(null, "VEUILLEZ SELECTIONNER LE TYPE D'EAU A EXPORTER", null, JOptionPane.ERROR_MESSAGE);
          return;
        }
        
         if(jComboBoxSelectionFormat.getSelectedIndex()==-1)
        {
          JOptionPane.showMessageDialog(null, "VEUILLEZ SELECTIONNER LE FORMAT D'EXPORTATION", null, JOptionPane.ERROR_MESSAGE);
            return;
        }
         
         System.out.println("list eau taille = "+list_eau.size())   ;
              
        if(list_eau==null)
        {
          JOptionPane.showMessageDialog(null, "ERREUR PAS D'EAU A EXPORTER", null, JOptionPane.ERROR_MESSAGE);
            return;
        
        }
        //extraire de la liste des eaux les eaux de type getTyp..... 
        //  list_eau.
          for(Eau ep:list_eau)
          {  System.out.println("eau type = "+ep.getTypeEau())   ;
                 
             if(ep.getTypeEau().equals(typeEau))
             {  
                 System.out.println("OK COMPATIBLE")   ;
                 eauExporte.add(ep);
               }
             
          
          }
        //    return;
         if(eauExporte.isEmpty())
                      { 
                          JOptionPane.showMessageDialog(null, "PAS D\'"+typeEau.toUpperCase()+"  A EXPORTER");
                          return;
                      }
                       
        
        if(jComboBoxSelectionFormat.getSelectedItem().toString().equals("CSV"))
            path="C://Exportation//Exportation "+DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.FRANCE).format(deb)+"-"+DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.FRANCE).format(fin)+".csv";

        else//Xml
            path="C://Exportation//Exportation "+DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.FRANCE).format(deb)+"-"+DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.FRANCE).format(fin)+".xml";

        
        
//        System.out.println("Type d'eau = "+getTypeEaumastertable()+" Format = "+jComboBoxSelectionFormat.getSelectedItem().toString());
        try {
            //    Application ap = new Application(); 
                WritableWorkbook workbook = Workbook.createWorkbook(new File(path));
                WritableSheet sheet = workbook.createSheet("Feuille 0", 0); 
                
                {};
                //renseigner le type d'eau et la période
                
                Label label1 = new Label(7, 3, "                  EXPORTATION DES ANALYSES  ");
                sheet.addCell(label1); 
                
                Label label2 = new Label(1, 4, " SERVICE HYGIENE ET ENVIRONNEMENT  ");
                sheet.addCell(label2); 
                
                
                Label label3 = new Label(2, 2, getTypeEaumastertable());
                sheet.addCell(label3); 
                
                Label label = new Label(0, 11, "PARAMETRES");
                sheet.addCell(label); 
                
                //Insertion image 
               /* new WritableImage(0, 0, 1, 1,new File(cheminFichier));
			sheet.addImage(image);*/
                
                
               //recupère la liste des normes de ce type d'eau 
                //@param le type d'eau
                List<Norme> ls = metier.getParametreEau(idtypEau) ;
                
                if(!ls.isEmpty())
                 {  int i = 0,j = p;
                    //rempli la 4eme ligne de avecles labels des normes
                    //si possible metttre le Font
                     
                     /**
                      remplissage ligne par ligne
                     */
                  int l = 0;
                    tableau = new Hashtable[ls.size()];
                    tableau2 = new Hashtable[ls.size()];
                     
                    //tableau.
                    for(Norme n:ls)
                     {//i colone j ligne
                       Label labelnor = new Label(i, j, n.getNormeNomParam());
                       sheet.addCell(labelnor);
                       tableau[l] = new Hashtable();
                       tableau[l].put( j,n.getNormeNomParam());//garde la reference de la ligne 
                       System.out.println("pos j ="+j);
                               
                        j++;
                        l++;
                     }
                 //parcours la liste des eaux pour remplir la feuille
                     int colE= 4;  //1st colone de l'eau
                     
                     
                      
                      for(Eau e:eauExporte)
                      {
                          
                          
                          ///met le numer d'hydrologie de l'eau
                          Label hydro = new Label(colE,p-1 , e.getNumEngLabo());
                                          sheet.addCell(hydro);
                                        
                          
                          
                        //recupere la liste des analyses de l'eau e
                          List<Analyse> ls_analyse = metier.getAllAnalysesEau(e.getId());
                          if(ls_analyse!=null)
                          {
                            System.out.println(" LA LISTE NON VIDE");
                          }
                          for(Analyse a:ls_analyse)
                           { //recherche de la position du label de l'analyse
                                int k = p;
                               for(int ll=0;ll<ls.size();ll++)        
                                {
                                   if(a.getAnalyseNomParam().equals(tableau[ll].get(k)))
                                   {    int rowE = k;//(int) ;
                               
                               
                               //System.out.println("colE = "+colE+" rowE = "+rowE);
                               
                               //a.getAnalyseTypeResultat().equals("reel")
                                   Label result = new Label(colE,rowE , a.getAnalyseResult());
                                   sheet.addCell(result);
//                                   if(Float.isNaN(Float.parseFloat(a.getAnalyseResult())))
//                                       {Label result = new Label(colE,rowE , a.getAnalyseResult());
//                                          sheet.addCell(result);
//                                       }else
//                                        {
//                                          Number result = new Number(colE,rowE , Float.parseFloat(a.getAnalyseResult()));
//                                        sheet.addCell(result);
//                                        }   
                                      break;
                                    }
                                   
                                   k++;
                                }
                                 //System.out.println(" k ="+k);
                         
                              
                              
                           }  
                            
                          colE++; //eau suivante
                          
                      }
                  workbook.write();
            
                 }
                
                
                
                
                
                // All sheets and cells added. Now write out the workbook
           try {
                workbook.close();
            } catch (WriteException ex) {
                //Logger.getLogger(ExporterExcel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, " PROBLEME  \n"+ex, null, JOptionPane.ERROR_MESSAGE);
            return;
        
            }
        } catch (IOException ex) {
            //  Logger.getLogger(ExporterExcel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, " ERREUR FICHIER \n"+ex, null, JOptionPane.ERROR_MESSAGE);
            return;
        }
       // crée une feuille
        
        
        
        
        if ( Desktop.isDesktopSupported() ) {
	// On récupère l'instance du desktop :
	Desktop desktop = Desktop.getDesktop();
	
	// On vérifie que la fonction open est bien supportée :
	if (desktop.isSupported(Desktop.Action.OPEN)) {
                try {
                    // Et on lance l'application associé au fichier pour l'ouvrir :
                    desktop.open(new File(path));
                } catch (IOException ex) {
                   // Logger.getLogger(JDialogAdmin.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
	}
}

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxSelectionFormat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private org.jdesktop.swingx.JXTable mastertabletypeEau;
    // End of variables declaration//GEN-END:variables
}
