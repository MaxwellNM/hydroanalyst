/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * statGlobal.java
 *
 * Created on 16 janv. 2012, 22:33:41
 */
package cpc.laboChimie.ui;

/**
 *
 * @author MAXWELL
 */
import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import cpc.laboChimie.jpa.Analyse;
import cpc.laboChimie.jpa.Eau;
import cpc.laboChimie.jpa.Norme;
import cpc.laboChimie.jpa.TypeEau;
import cpc.laboChimie.jpa.ZoneClimatique;
import cpc.laboChimie.metier.IMetier;
import cpc.laboChimie.metierConfig.ParametreGestion;
import cpc.laboChimie.model.TableModelstatistique;
import cpc.laboChimie.struct.Couple;
import cpc.laboChimie.struct.InfosStat;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Vector;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.JOptionPane;
//import org.jfree.
import org.jdesktop.application.Action;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

public class statGlobal extends javax.swing.JDialog {
  
    private TableModelstatistique tablestat ;
    private ParametreGestion parametreGestion;
    private IMetier metier;
    private Vector stats = new Vector();
    private Hashtable[] tableau;
    
    private JFChefLabo jchef;
    private JDialogAdmin jad;
    List<TypeEau> lse;
    private Hashtable[] tableau2;
    private int p;
    private float lastposFich;
    /** Creates new form statGlobal */
    public statGlobal() {
        
        this.setTitle("STATISTIQUE GLOBALE");
       
        //jchef = chef;
        //jad =ad;
        
        tablestat = new TableModelstatistique(stats);
        initComponents();
        jComboBoxEauType.setSelectedIndex(-1);
        jComboBoxZoneClimatique.setSelectedIndex(-1);
         initSpring();
         TableStatistique.getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
         //tablestat.get
                  
        
    }

   /* private void fermer1()
    {
      jad.setjFrameStatGlobal(null);
     
    }
    private void fermer2()
    {
         jchef.setjFrameStatGlobal(null);
    
    }*/
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    
        private void initSpring() {

     //   List<Client> ls = ;
      //  tablestat = new TableModelstatistique(stats);
        //tableModelEaux = new TableModelEaux(eaus);
        parametreGestion = ParametreGestion.getInstance();
       metier = parametreGestion.getMetier();
     // ModelTypeEau.addRows(metier.getAllTypeEau());
      
       //remplir la jcombobox region
       List<ZoneClimatique> ls = metier.getAllZoneClim();
       
       if (ls!=null)
       for(ZoneClimatique z :ls)
        {
          jComboBoxZoneClimatique.addItem(z.getZoneClimatique());
        
        }
       
       
       //remplir la jcombobox type eaux
       
        lse = metier.getAllTypeEau();
        for(TypeEau t :lse)
        {
          jComboBoxEauType.addItem(t.getCategorie());
        
        }
       
       
       
      
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxZoneClimatique = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxEauType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jXDatePicker_Debut = new org.jdesktop.swingx.JXDatePicker();
        jToggleButton1 = new javax.swing.JToggleButton();
        jXDatePicker_Fin = new org.jdesktop.swingx.JXDatePicker();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableStatistique = new org.jdesktop.swingx.JXTable();
        jToggleButton2 = new javax.swing.JToggleButton();

        setName("Form"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cpc.laboChimie.mainApp.class).getContext().getResourceMap(statGlobal.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jComboBoxZoneClimatique.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", " " }));
        jComboBoxZoneClimatique.setName("jComboBoxZoneClimatique"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jComboBoxEauType.setName("jComboBoxEauType"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jXDatePicker_Debut.setFocusable(false);
        jXDatePicker_Debut.setName("jXDatePicker_Debut"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cpc.laboChimie.mainApp.class).getContext().getActionMap(statGlobal.class, this);
        jToggleButton1.setAction(actionMap.get("showstat")); // NOI18N
        jToggleButton1.setText(resourceMap.getString("jToggleButton1.text")); // NOI18N
        jToggleButton1.setName("jToggleButton1"); // NOI18N

        jXDatePicker_Fin.setFocusable(false);
        jXDatePicker_Fin.setName("jXDatePicker_Fin"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEauType, 0, 151, Short.MAX_VALUE)
                    .addComponent(jComboBoxZoneClimatique, 0, 151, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1)
                    .addComponent(jXDatePicker_Debut, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .addComponent(jXDatePicker_Fin, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxZoneClimatique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxEauType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jXDatePicker_Debut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jXDatePicker_Fin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        TableStatistique.setModel(tablestat);
        TableStatistique.setName("TableStatistique"); // NOI18N
        TableStatistique.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableStatistiqueMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableStatistique);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 956, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jToggleButton2.setAction(actionMap.get("InfosAvance")); // NOI18N
        jToggleButton2.setText(resourceMap.getString("jToggleButton2.text")); // NOI18N
        jToggleButton2.setName("jToggleButton2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(796, Short.MAX_VALUE)
                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(298, 298, 298))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TableStatistiqueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableStatistiqueMouseClicked
        // TODO add your handling code here:
        
        //on va afficher les infos détaillées la courbe de variation de ...........
        
    }//GEN-LAST:event_TableStatistiqueMouseClicked

    /**
     * @param args the command line arguments
     */
   /* public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new statGlobal().setVisible(true,jchef,jad);
            }
        });
    }*/

    @Action
    public void showstat() {
      
        String z ="";
        String  et ="";
        // recupère la region
        if(jComboBoxZoneClimatique.getSelectedIndex()!=-1)
           z = jComboBoxZoneClimatique.getSelectedItem().toString();
        else
        {
          JOptionPane.showMessageDialog(null, "VEUILLEZ SELECTIONNER UNE ZONE CLIMATIQUE");
          return;
        }
    
        if(jComboBoxEauType.getSelectedIndex()!=-1)
            et = jComboBoxEauType.getSelectedItem().toString();
         else
        {
          JOptionPane.showMessageDialog(null, "VEUILLEZ SELECTIONNER UN TYPE D'EAU");
          return;
        }
    Date d1 =  this.jXDatePicker_Debut.getDate();
    
    Date d2 = this.jXDatePicker_Fin.getDate();
        if(d1==null || d2==null)
         {
          JOptionPane.showMessageDialog(null, "VEUILLEZ SELECTIONNER UNE PERIODE");
          return;
        }    
        
        if(d1.compareTo(d2)>0)
         {
             JOptionPane.showMessageDialog(null, "VEUILLEZ ENTRER LES DATES DANS L'ORDRE");
          return;
        
         }
        
        System.out.println("LES DATES d1 = "+d1.toString()+" d2 = "+d2.toString());
        
        // recupere la liste des eaux de cette période
        Vector<Eau> ls = metier.getAllEauPeriode2(d1, d2,et);
        
        if(ls.isEmpty())
        {
           JOptionPane.showMessageDialog(null, "AUCUNE EAU A CARACTERISER");
          return;
        }
        
        //recupere l'id du type d'eau
            long idTypeau = 0;
        for(TypeEau t: lse)
        {
           if(t.getCategorie().equals(jComboBoxEauType.getSelectedItem().toString()))            
           {
              idTypeau = t.getId();
              break;
               
           }
        }
        
        List<Norme> lsp = metier.getParametreEau(idTypeau) ;
                
                if(!lsp.isEmpty())
                 {  int i = 0,j = p;
                    //rempli la 4eme ligne de avecles labels des normes
                    //si possible metttre le Font
                     
                     /**
                      remplissage ligne par ligne
                     */
                  int l = 0;
                    tableau = new Hashtable[lsp.size()];
                    tableau2 = new Hashtable[lsp.size()];
                    //tableau2[i].put(et, new Vector()); représente les valeurs réels  du parametre i 
                    //tableau.
                    for(Norme n:lsp)
                     {//i colone j ligne
                       /*Label labelnor = new Label(i, j, n.getNormeNomParam());
                       sheet.addCell(labelnor);*/
                       
                       tableau[l] = new Hashtable();
                       tableau[l].put( j,n.getNormeNomParam());//garde la reference de la ligne 
                        j++;
                        l++;
                     }
                 //parcours la liste des eaux pour remplir la feuille
                     int colE= 4;  //1st colone de l'eau
                     
                   for(Norme n:lsp)  
                   {
                       //ls est la liste des eaux du type sélectionné
                       Vector<Couple> v = new Vector<Couple>(); //contiendra les valeurs des analyses  
                       int cpt=0; //compte le nbre de va réelle correspondant à la norme
                      for(Eau e:ls)
                      {
                          
                          
                          ///met le numer d'hydrologie de l'eau
                      /*    Label hydro = new Label(colE,p-1 , e.getNumEngLabo());
                                        sheet.addCell(hydro);*/
                                        
                          
                          
                        //recupere la liste des analyses de l'eau e
                          List<Analyse> ls_analyse = metier.getAllAnalysesEau(e.getId());
                          if(ls_analyse!=null)
                          {
                            System.out.println(" LA LISTE NON VIDE");
                          }
                          for(Analyse a:ls_analyse)
                           { //recherche de la position du label de l'analyse
                              
                              /* for(int ll=0;ll<lsp.size();ll++)  //lsp est la liste des normes      
                                {
                            */   if(a.getAnalyseNomParam().equals(n.getNormeNomParam()))
                                   {    
                               
                               
                   if(  (a.getAnalyseTypeResultat().equals("reel"))|| (a.getAnalyseTypeResultat().equals("reel<"))||(a.getAnalyseTypeResultat().equals("reel>")))
                                     {
                                           //est-ce que c'est un nombre ? si oui ajoute dans le vecteur sinon passe
                                           Float f = Float.parseFloat(a.getAnalyseResult());
                                           cpt++;
                                            Couple c =new Couple(f.doubleValue(), e.getDatePrelevement());
                                        
                                           v.add((cpt-1),c);
                                           //pb tu peux avoir plusieurs valeurs nulles
                                       }
                                   }   
                              
                           }  
                          //eau suivante               
                           
                       }
                      // fin eaux_type 
                          int tl = v.size();
                          double[]  tab = new double[tl];
                          for(int p=0;p<tl;p++)
                          {  Couple c = new Couple();
                             c = v.elementAt(p);
                             tab[p] = c.valp;//(double) v.elementAt(p);
                          
                          }
                          System.out.print("EXTRACTNorme : "+n.getNormeNomParam()+"\n");
                         /* for (int g =0;g<tl;g++)
                          {*/
                          //  System.out.print(" "+tab+" -");
                         
                          //}
                          //Vector ligne = new Vector();
                          tri(v);//tri en fonction des dates 
                          //compter le nbre de valeurs nulles les retirer  dans le vecteur et les comptabiliser dans lastructure infostat
                        
                          InfosStat st = new InfosStat(n.getNormeNomParam(), v);
                          if(tl>0)
                          {//triRapide(tab, 0,tl-1);//tri du tableau
                         Tri(tab);//tri du tableau
                         // compression des données.
                          
                          //ligne.add(0, n.getNormeNomParam());
                          
                          // calcul des fonctions statistiques élémentaires
                            //double moy = getMoy(tab);
                          st.moyenne = getMoy(tab);
                          //ligne.add(1, getMoy(tab));
                          //double  var  = getVar(tab) ;
                          st.variance =getVar(tab);
                         // ligne.add(2,getVar(tab));
                          st.Ecart = getEcart(tab);
                          //ligne.add(3,getEcart(tab));
                          st.min = getMin(tab);
                          
                          //compression des données.
                          Vector vec = zip(tab);
                         /* Object[] t = vec.toArray();
                          int cp = t.length;
                          double t1[] = new double[j]                 ;
                          for(int m=0;i<cp;i++)
                          {  Double val =  (Double)t[m];
                             t1[m]= val.doubleValue();
                          }
                           */   
                                   
                          //ligne.add(4,getMin(tab));
                          double q1 = getQuartile1(vec);
                         st.Quart1 = q1;
                          // ligne.add(5,q1);
                          st.med = getMedianne(vec);
                         // ligne.add(6,getMedianne(tab));
                          double q3 = getQuartile3(vec);
                          st.Quart3 = q3;
                          //ligne.add(7,q3);
                          st.max = getMax(tab);
                         // ligne.add(8,getMax(tab));
                          st.InterQuart=q3-q1;
                         // ligne.add(9,q3-q1);
                          
                          
                          } 
                          
                          
                          //rempli la ligne de table stat 
                          tablestat.addRow(st);
                      
                 //fin normes
             }
    
        }   // fin if normes exist
        else
                {
                  JOptionPane.showMessageDialog(null, " AUNE NORME N\'EXISTE POUR CE TYPED'EAU");
                
                }
    }//fin showstat
    
    
    public void Interchange(double a,double b)
    {  
         double c;
         c =a;
         a=b;
         b=c;
         
    
    }
    
    public int pivot (double[] b, int left,int right,int pivotIndex) //renvoie la position du pivot
     {  double c;
        double pivotValue =0.0;
         pivotValue = b[pivotIndex];
      //swap b[pivotIndex] and b[right]  // Move pivot to end
      
      double tmp = b[right];
      b[right] = b[pivotIndex];
      b[pivotIndex] = tmp;
      int storeIndex = left;
      for (int i = left;i<right;i++)  // left ≤ i < right
          if (b[i] < pivotValue)
             {  //swap array['i'] and array['storeIndex']
                 tmp = b[i];
                 b[i] = b[storeIndex];
                 b[storeIndex] = tmp;
                 storeIndex = storeIndex + 1;
             }
      //swap array['storeIndex'] and array['right']  // Move pivot to its final place
       tmp = b[right];
      b[right] = b[storeIndex];
      b[storeIndex] = tmp;
      return storeIndex;
     }
    
    
    
    public Vector zip ( double[] v)
     {
       Vector res = new Vector();
       int n = v.length;
      // System.out.println("\nTAILLE DU VECTEUR"+n);
       for(int i = 0;i<n-1;i++)
       {  Double val   = new Double(v[i]);
        //System.out.println("\nval = "+val);
         // node mn =new node();
          for(int j=i+1;j<n;j++)
          {  
              Double rep = new Double(v[j]);
              if(val.compareTo(rep)==0)
              {
                v[j] = -1.0;//-1.0;//.set(j, new Double(-1));
              }
          
          }

       }
       
       for(int i=0;i<n;i++)
       {
          if(v[i]!=-1.0)
              res.add(v[i]);
       }
       return res;
     
     }
     
    
    //fonction de tri quicksort
    
    public /*double[]*/void triRapide(double[] b, int i,int j)
    {   int piv;
    String ch = "" ;
        if(i<j)
            
         {   Random r= new Random();
            int k = r.nextInt(j);
             piv = pivot(b, i, j,k);
           triRapide(b, i, piv-1);
           triRapide(b, piv+1, j);
         }
    }
    
    
  private void tri (Vector<Couple> v)
  {
  
     int n =v.size();
         double c;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n-1;j++)
            {
               if(v.elementAt(i).dt.compareTo(v.elementAt(j).dt)>0)
                {
                  Couple cp  = v.elementAt(i);
              v.add(i, v.elementAt(j)) ;
              v.add(j,cp) ;
         
                }
            }
        }
        
  }
    
    
    private void Tri(double[] b)
    {   int n =b.length;
         double c;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n-1;j++)
            {
               if(b[i]>b[j])
                {
                  c = b[i];
              b[i] =b[j] ;
              b[j]=c;
         
                }
            }
        
        }   
    
    }
    
    // FONCTIONS STATISTIQUES
    /**
     *cette fonction renvoie la médianne d'une série
     * @param un tableau de réels déjà trié
     */
    
    private double getMedianne(Vector b)
    { double m =0.0f;
      int n =b.size();
   //   System.out.println(" GETMEDIANNE n = "+n);
      if(n%2!=0) //si n est impair
                m =Double .parseDouble(b.elementAt((n-1)/2).toString());
              
          //m = b[(n-1)/2 ]; discret
        //  m = 2*(b[(n-1)/2]*b[(n-1)/2+1])/(b[(n-1)/2]+b[(n-1)/2 +1]);
      else
            m =(Double .parseDouble(b.elementAt((n)/2-1).toString())+Double .parseDouble(b.elementAt((n)/2).toString()))/2;
              
         //m = (b[n/2 -1]+b[n/2])/2;
          //m=2*(b[n/2 -1]*b[n/2])/(b[n/2 -1]+b[n/2]);
      
    return m;
    }
    
    
    private double getQuartile1(Vector b) 
    {
       double q1 =0.0f;
      int n =b.size();
     // System.out.println(" GETQUARTILE1 n = "+n);
      
      int r = n%4;
      int q = n/4;// quotient de la division
      
      switch(r)
      {
          case 0: {
                    q1 =Double .parseDouble(b.elementAt(q-1).toString());
              // q1 = (2*b[(q)-1]*b[(q)])/(b[(q)-1] + b[(q)]); //moyenne harmonique
              
                  break;}
          case 1: {
              
                    q1 =Double .parseDouble(b.elementAt(q).toString());
              
                  //q1 =b[q];// casdiscret
           //   q1 = (2*b[(q)]*b[(q)+1])/(b[(q)] + b[(q)+1]); //moyenne harmonique
                  
                  break;}
              
          case 2: {
                    q1 =Double .parseDouble(b.elementAt(q).toString());
              
                   //q1 =b[q];
             //  q1 = (2*b[(q)]*b[(q)+1])/(b[(q)] + b[(q)+1]); //moyenne harmonique
              
                   break;} 
      
          default : break;
      }
    return q1;
    
    }
    
    private double getQuartile3(Vector<Double> b) 
    {
            double q3 =0.0f;
      int n =b.size();
       System.out.println(" getQuartile3 n = "+n);
     
      int r = (n)%4;
      int q = n/4;// quotient de la division
      
      switch(r)
      {
          case 0: {
                    //q3 =b[3*(q)-1];
                    q3 =Double .parseDouble(b.elementAt(3*(q)-1).toString());
              
                  break;}
          case 1: {
                   
               q3 =Double .parseDouble(b.elementAt(3*(q)).toString());
              
              //q3 = b[3*(q)]; //cas discret
                  //q3 = (2*b[3*(q)]*b[3*(q)+1])/(b[3*(q)] + b[3*(q)+1]); //moyenne harmonique
                  break;}
              
          case 2: {
              
                q3 =Double .parseDouble(b.elementAt(3*(q)).toString());
             
              //   q3 = b[3*(q)]; //cas discret
                   //q3 = (2*b[3*(q)]*b[3*(q)+1])/(b[3*(q)] + b[3*(q)+1]); //moyenne harmonique
                  break;} 
      
                  default : break;
      }
    return q3;
    
    }
    
    private double getMin(double[] b) 
    {
        int n = b.length;
         System.out.println(" GETMIN n = "+n);
     
        double min = b[0];
        for(int i=1;i<n;i++)
        {
          if(b[i]<min)
              min = b[i];
        }
        return min;
    }
    
    private double getMax(double[] b) 
    {
          int n = b.length;
           System.out.println(" GETMAX n = "+n);
     
        double max = b[0];
        for(int i=1;i<n;i++)
        {
          if(b[i]>max)
              max = b[i];
        }
        return max;
    
    }
        
    private double getMoy(double[] b) 
    {  
        int n =b.length;
         System.out.println(" GETMOY n = "+n);
     
        double moy = 0.0f;
        for(int i=0;i<n;i++)
          moy+=b[i];
    
      return moy/n;
    }
    
  /* private double get(double[] b) 
    {
    
    }
    */
   private double getVar(double[] b) 
    { 
         int n = b.length;
          System.out.println(" GETVAR n = "+n);
     
         double var =0.0;
         double moy = getMoy(b);
         for(int i=0;i<n;i++)
         {
            var += Math.pow((b[i]-moy), 2.0);
         }
         return (var/n);
    
    }
   
   private double getEcart(double[] b) 
    {
      int n = b.length;
         //double e =0.0;
       System.out.println(" GETecart n = "+n);
     
         double v = getVar(b);
         
         return (Math.sqrt(v));
         
    }
   
   public String getNomMastertable()
   {  String res ="";
       if (TableStatistique.getSelectedRow() != -1) {
                    
            int ligne = TableStatistique.getSelectedRow();
            res= (String)TableStatistique.getValueAt(ligne, 0);
            
             return res;
        } else {
            return null;
        }
   
   }
   
   public int getligneselectMastertable()
   {
        if (TableStatistique.getSelectedRow() != -1) 
          return TableStatistique.getSelectedRow();
        else
            return 0;
   
   }
   
      public double getMoyMastertable()
   {  String res ="";
       double moy = 0.0;
       if (TableStatistique.getSelectedRow() != -1) {
                    
            int ligne = TableStatistique.getSelectedRow();
            res= (String)TableStatistique.getValueAt(ligne, 0);
           // moy = Doubl
             return moy;
        } else {
            return moy;
        }
   
   }
   
   public InfosStat getMastertableLigneInfo()
   {
       int ligne = getligneselectMastertable();
       
      InfosStat infstat = new InfosStat(getNomMastertable(), getVectorMasterTable());
      
      infstat.moyenne = ((Double) TableStatistique.getValueAt(ligne, 1));
      infstat.variance = ((Double) TableStatistique.getValueAt(ligne, 2));
     infstat.Ecart = ((Double) TableStatistique.getValueAt(ligne, 3));
      infstat.min = ((Double) TableStatistique.getValueAt(ligne, 4));
      infstat.Quart1 = ((Double) TableStatistique.getValueAt(ligne, 5));
      infstat.med = ((Double) TableStatistique.getValueAt(ligne, 6));
      infstat.Quart3 = ((Double) TableStatistique.getValueAt(ligne, 7));
      infstat.max = ((Double) TableStatistique.getValueAt(ligne, 8));
      infstat.InterQuart = ((Double) TableStatistique.getValueAt(ligne, 9));
      //infstat.moyenn = (double) TableStatistique.getValueAt(ligne, 1);
      return infstat;
       
   }
   public Vector<Couple> getVectorMasterTable()
   {  Vector<Couple>  v = new Vector<Couple>(); 
       if (TableStatistique.getSelectedRow() != -1) {
                    
            int ligne = TableStatistique.getSelectedRow();
            v= (Vector<Couple>)TableStatistique.getValueAt(ligne, 10);
            
             return v;
        } else {
            return null;
        
     
   }
   }

    @Action
    public void InfosAvance() throws DocumentException, FileNotFoundException {

       // Crée une image représentant l'évolution d'un paramètre
        //le long de la pérode sélectionnée
        String nomParam = getNomMastertable();
        Vector<Couple> v = getVectorMasterTable();
        String path = "C://Statistique"+nomParam+".pdf";
        InfosStat infs = new InfosStat(nomParam, v);
        infs = getMastertableLigneInfo();
        lastposFich = 500f;        
    
        //writeChartToPDF(generateTimeSerieChart(nomParam, v), 400, 400, nomParam, path);
        writeChartToPDF(generateTimeSerieChart(nomParam, v), 300, 300,  path,infs);
        
 
    
    
    }
    
    public  void writeChartToPDF(JFreeChart chart, int width, int height, String fileName,InfosStat infs) {
    PdfWriter writer = null;
 
    Document document = new Document();
 
    try {
        writer = PdfWriter.getInstance(document, new FileOutputStream(
                fileName));
        document.open();
        PdfContentByte contentByte = writer.getDirectContent();
        
            enteteItext(infs.nomParam, document, contentByte);
        
        
        PdfTemplate template = contentByte.createTemplate(width, height);
        Graphics2D graphics2d = template.createGraphics(width, height, new DefaultFontMapper());
        Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, width,height);
 
        chart.draw(graphics2d, rectangle2d);
 
        graphics2d.dispose();
        contentByte.addTemplate(template, 50f, 300f);
        Phrase infomoy = new Phrase(" Moyenne  :"+infs.moyenne, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,infomoy , 50f, 290f, 0);
          
        Phrase infovar = new Phrase(" Variance  :"+infs.variance, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,infovar , 50f, 270f, 0);
        
        Phrase infoec = new Phrase(" Ecart type  :"+infs.Ecart,new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,infoec , 50f, 250f, 0);
        
        Phrase min = new Phrase(" Min  :"+infs.min, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,min , 50, 230f, 0);
           
        Phrase Quart1 = new Phrase(" 1er Quartile  :"+infs.Quart1, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,Quart1 , 50, 210f, 0);
             
        Phrase med = new Phrase(" Médianne  :"+infs.med, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,med , 50, 190f, 0);

        Phrase Quart3 = new Phrase(" 3eme Quartile  :"+infs.Quart3, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,Quart3 , 50, 170f, 0);
             
        Phrase max = new Phrase(" Max  :"+infs.max, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,max , 50, 150f, 0);

        Phrase interquart = new Phrase(" Interquartile  :"+infs.InterQuart, new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(contentByte, Element.ALIGN_LEFT,interquart , 50, 130f, 0);



        
 
    } catch (Exception e) {
        e.printStackTrace();
    }
    document.close();
    
               JOptionPane.showMessageDialog(null, "FIN IMPRESSION");
    //affichage à l'écran par appel de jdesktopp
    
// On vérifie que la classe Desktop soit bien supportée :
if ( Desktop.isDesktopSupported() ) {
	// On récupère l'instance du desktop :
	Desktop desktop = Desktop.getDesktop();
	
	// On vérifie que la fonction open est bien supportée :
	if (desktop.isSupported(Desktop.Action.OPEN)) {
                try {
                    // Et on lance l'application associé au fichier pour l'ouvrir :
                    desktop.open(new File(fileName));
                } catch (IOException ex) {
                   // Logger.getLogger(JDialogAdmin.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
	}
}
}


    
    public void enteteItext(String nomp,Document doc, PdfContentByte cb)throws Exception
    {
       Image image = Image.getInstance("C://Impression_ITEXT//minste.jpg");
		image.setAbsolutePosition(259f,775f);
                image.scaleAbsolute(41,46);
                image.setAlignment(Image.TEXTWRAP);
          Image img = Image.getInstance("C://Impression_ITEXT//cpcBB.jpg")      ;
                img.setAbsolutePosition(22f,700f);
                img.scaleAbsolute(69f,73f);
               // img.setAlignment(Image.TEXTWRAP);
         
         Phrase phrase = new Phrase(new StringTokenizer("MINSANTE", " ").nextToken(), new Font(Font.FontFamily.TIMES_ROMAN, 8,	Font.NORMAL, BaseColor.BLACK));
           ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, phrase, 259f, 770f, 0);
      /*  
         Phrase labRef = new Phrase("Laboratoire national de référence et de santé publique",new Font(Font.FontFamily.TIMES_ROMAN, 7,	Font.NORMAL, BaseColor.BLACK));
           ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, labRef, 1f, 694f, 0);*/
          
          Phrase RepCamer = new Phrase("  REPUBLIQUE DU CAMEROUN ", new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, RepCamer, 10f, 805f, 0);
          
          Phrase PaixTravailPatrie = new Phrase("  PAIX-TRAVAIL-PATRIE ", new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
     
          ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, PaixTravailPatrie, 24f, 795f, 0);
          
          
          Phrase RepCameroon = new Phrase("REPUBLIC OF CAMEROON ", new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, RepCameroon, 425f, 805f, 0);
          
          Phrase PeaceWorkFatherland = new Phrase("PEACE-WORK-FATHERLAND ", new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.NORMAL, BaseColor.BLACK));
             ColumnText.showTextAligned(cb, Element.ALIGN_LEFT,PeaceWorkFatherland , 419f, 795f, 0);
          
             
             
          Phrase exelBio = new Phrase("   L'excellence en Biologie accessible à tous",new Font(Font.FontFamily.TIMES_ROMAN, 7,	Font.NORMAL, BaseColor.BLACK));
            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, exelBio, 5f, 686f, 0);
            
         Phrase   cpc =new Phrase("CENTRE PASTEUR DU CAMEROUN : Laboratoire National de Référence et de Santé Publique",new Font(Font.FontFamily.TIMES_ROMAN, 9,	Font.BOLD, BaseColor.BLACK));
            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, cpc, 121f, 735f, 0);
         
         Phrase   cpc1 =new Phrase("Membre du Réseau International des Instituts Pasteur ",new Font(Font.FontFamily.TIMES_ROMAN, 9,	Font.BOLD, BaseColor.BLACK));
            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, cpc1, 180f, 725f, 0);
            
            
            
         Phrase Bpcpc = new Phrase("B.P : 1274 - YAOUNDE  CAMEROUN Internet :  http://www.pasteur-yaounde.org ",new Font(Font.FontFamily.TIMES_ROMAN, 8,	Font.NORMAL, BaseColor.BLACK));
            /*Anchor anchor = new Anchor("http://www.pasteur-yaounde.org");
                anchor.setReference("http://www.pasteur-yaounde.org");
                anchor.setFont(new Font(Font.FontFamily.TIMES_ROMAN, 2, Font.NORMAL, BaseColor.WHITE));
          
           Bpcpc.add(anchor);*/
             ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, Bpcpc, 160f, 715f, 0);
            
         Phrase faxDema = new Phrase("Tel : (237) 22 23 10 15 / 22 23 18 03 - Télécopie : (237) 22 23 15 64 Couriel : cpc@pasteur-yaounde.org",new Font(Font.FontFamily.TIMES_ROMAN, 8,	Font.NORMAL, BaseColor.BLACK) );
           // faxDema.add();
            
               ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, faxDema, 125f, 705f, 0);
           
         Phrase servLhe = new Phrase("Service d'Hygiène Environnement section physico-chimie",new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.BOLD, BaseColor.BLACK));
                 ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, servLhe, 151f, 690f, 0);
         
         Phrase Bulletin = new Phrase("Informations sur les statistiques régionale : Zone "+this.jComboBoxZoneClimatique.getSelectedItem().toString(),new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.BOLD, BaseColor.BLACK));
                 ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, Bulletin, 185f, 680f, 0);
         
         Phrase typEau = new Phrase("Paramètre  : "+nomp,new Font(Font.FontFamily.TIMES_ROMAN, 10,	Font.BOLD, BaseColor.BLACK));
                     //METTRE UNE LIGNE
         LineSeparator line = new LineSeparator(100 ,100f,BaseColor.BLACK, 1, 671f);        
             //    Chunk ckline= new Chunk(line);
                 typEau.add(line);
          ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, typEau, 185f, 670f, 0);
            doc.add(img);
                doc.add(image);
            Phrase ligne = new Phrase(new Chunk(new LineSeparator(1f, 75, BaseColor.BLACK, Element.ALIGN_CENTER, 0.5f)));           
              ColumnText.showTextAligned(cb, Element.ALIGN_CENTER, ligne, 50f, 660f, 0);
                     
    }
   
    
    
    public JFreeChart generateTimeSerieChart(String nomParam, Vector<Couple> v)
    {
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
      // DefaultBoxAndWhiskerCategoryDataset dataset =new DefaultBoxAndWhiskerCategoryDataset();
       
       //dataset.add(v, WIDTH, nomParam);
       for(Couple c :v)
        {
            dataset.addValue(c.valp, "", DateFormat.getDateInstance(DateFormat.SHORT, Locale.FRANCE).format(c.dt));
        }
        
      /* ChartFactory.createTimeSeriesChart("Courbe de variation  du "+nomParam+"",
               "Période",
               "Valeurs",
               null, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);*/
       //JFreeChart chart1 =ChartFactory.createl
     JFreeChart chart =  ChartFactory.createLineChart("Evolution du paramètre "+nomParam, 
               "Période",
               "Valeurs",
               dataset,  // Dataset
				PlotOrientation.VERTICAL, true,  //Show legend
				true, true);

               
               return chart;
    }

    public  JFreeChart generatePieChart() {
        DefaultPieDataset dataSet = new DefaultPieDataset();
        dataSet.setValue("China", 19.64);
        dataSet.setValue("India", 17.3);
        dataSet.setValue("United States", 4.54);
        dataSet.setValue("Indonesia", 3.4);
        dataSet.setValue("Brazil", 2.83);
        dataSet.setValue("Pakistan", 2.48);
        dataSet.setValue("Bangladesh", 2.38);
 
        JFreeChart chart = ChartFactory.createPieChart(
                "World Population by countries", dataSet, true, true, false);
 
        return chart;
    }
 
    public  JFreeChart generateBarChart() {
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
        dataSet.setValue(791, "Population", "1750 AD");
        dataSet.setValue(978, "Population", "1800 AD");
        dataSet.setValue(1262, "Population", "1850 AD");
        dataSet.setValue(1650, "Population", "1900 AD");
        dataSet.setValue(2519, "Population", "1950 AD");
        dataSet.setValue(6070, "Population", "2000 AD");
 
        JFreeChart chart = ChartFactory.createBarChart(
                "World Population growth", "Year", "Population in millions",
                dataSet, PlotOrientation.VERTICAL, false, true, false);
 
        return chart;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTable TableStatistique;
    private javax.swing.JComboBox jComboBoxEauType;
    private javax.swing.JComboBox jComboBoxZoneClimatique;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker_Debut;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker_Fin;
    // End of variables declaration//GEN-END:variables
}
